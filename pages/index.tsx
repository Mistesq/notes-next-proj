import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { Grid, Box, Button, IconButton, Link as MaterialLink } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import styles from '../styles/Home.module.css'
import { useEffect, useState} from 'react'
import { nanoid } from 'nanoid'
import Noteslist from './../components/NotesList';
import Search from './../components/Search';
import AddNote from './../components/AddNote';
import EditNote from './../components/EditNote';
import { Note } from './../types/general';
import { useRouter } from 'next/router'
import Link from 'next/link'


const Home: NextPage = () => {
  const router = useRouter()

  let showNotePage = false

  const [showAddNote, setShowAddNote] = useState<boolean>(false)
  const [notes, setNotes] = useState<Array<Note>>([{
    id: "EkhwqqmsRwlsObUdPjElT",
    text: "initial note",
    date: "28.12.2021"
  }])
  const [currentNote, setCurrentNote] = useState<Note>({
    id: "EkhwqqmsRwlsObUdPjElT",
    text: "initial note",
    date: "28.12.2021"
  })
	const [searchText, setSearchText] = useState('')

	useEffect(()=>{
		const savedNotes = localStorage.getItem('react-notes-app-data')
    
		if(savedNotes)
		{
      const notes = JSON.parse(savedNotes)
			setNotes(notes)
		}
	},[])

  if(notes.findIndex(item => item.id == router.query.id) != -1) {
    showNotePage = true
  }

	const addNote = (text:string) => {
		const date = new Date()
		const newNote:Note = {
			id:nanoid(),
			text:text,
			date:date.toLocaleDateString()
		}
		const newNotes:Array<Note> = [...notes, newNote]
		setNotes(newNotes)
	}

  const selectNote = (noteId:string) => {
    setShowAddNote(false)
    let note = notes.filter((note)=> note.id === noteId)[0]
		setCurrentNote(note)
	}

  const editNote = (noteId:string, text:string) => {
    setShowAddNote(false)
    let note = notes.filter((note)=> note.id === noteId)[0]
    let newNotes = notes.slice();
    newNotes.forEach((item) => {
      if(item.id === noteId) {
        item.text = text
      }
    })
		setCurrentNote(note)
		setNotes(newNotes)
	}

	const deleteNote = (id:string) => {
		const newNotes = notes.filter((note)=> note.id !== id)
		setNotes(newNotes)
	}

  const toggleAddNote = (state:boolean) => {

    setShowAddNote(state)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      
        <main className={styles.main}>
          <h1 className={styles.title}>
            Note app
          </h1>
          {!showNotePage ?
            <>
              <Box sx={{ 
                display: 'flex', 
                alignItems: 'baseline', 
                justifyContent: 'flex-end',
                my: 1.5
                }}>
                <Button sx={{ mx: 1.5}} variant="contained" onClick={()=>toggleAddNote(true)} endIcon={<AddIcon />}>
                  Add note
                </Button>
                <Search handleSearchNote={setSearchText} />
              </Box>
              <Grid container spacing={2}>
                <Grid item xs={4}>
                  <Noteslist 
                    notes={notes.filter((note)=> note.text.toLowerCase().includes(searchText))} 
                    currentNoteId={showAddNote? '' : currentNote.id} 
                    handleEdit={selectNote} 
                    handleDelete={deleteNote} 
                  />
                </Grid>
                <Grid item xs={8}>
                  {!showAddNote ?
                    <EditNote handleEdit={editNote} handleDelete={deleteNote} note={currentNote}/>
                  : <AddNote handleSave={addNote}/>
                }
                </Grid>
              </Grid>
            </>
            : 
            <>
              <Box sx={{ 
                display: 'flex', 
                alignItems: 'baseline', 
                justifyContent: 'flex-start',
                my: 1.5,
                mb: 3
                }}>
                <MaterialLink> 
                  <Link href="/">
                    <a>Homepage</a>
                  </Link>
                </MaterialLink>
              </Box>
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <EditNote handleEdit={editNote} handleDelete={deleteNote} note={currentNote}/>
                </Grid>
              </Grid>
            </>
          }
        </main>
    </div>
  )
}

export default Home

